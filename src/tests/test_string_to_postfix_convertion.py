"""@package tests
@file test_string_to_postfix_convertion.py
@author Marek Klofera - xklofe01

@brief Test string to postftix
"""
import pytest

from duck_calc.math_lib.math_lib import MathLib


@pytest.mark.parametrize("problem, result", [
    # sum
    ("1 + 1", "1 1 +"),
    ("23 + -13", "23 -13 +"),
    ("-17 + -111", "-17 -111 +"),
    ("-126 + 26", "-126 26 +"),
    ("987654321 + 123456789", "987654321 123456789 +"),
    ("-987654321 + 123456789", "-987654321 123456789 +"),

    # sub
    ("1 - 1", "1 1 -"),
    ("2 - -1", "2 -1 -"),
    ("-7 - -1", "-7 -1 -"),
    ("-16 - 6", "-16 6 -"),
    ("987654321 - 123456789", "987654321 123456789 -"),
    ("-963852741 - 147258369", "-963852741 147258369 -"),

    # harder combinations
    ("7 + 5 + 8 - 2", "7 5 + 8 + 2 -"),
    ("-449 + 2 * 7 / 2", "-449 2 7 * 2 / +"),
    ("7 / 5 * 6", "7 5 / 6 *"),
    ("17 - 8 * -22 + 7", "17 8 -22 * - 7 +"),
    ("7 + 5 * 8 - 3", "7 5 8 * + 3 -"),
    ("13 + 4 * 5 + 13", "13 4 5 * + 13 +"),
    ("-13 + -4 * 5 + -13", "-13 -4 5 * + -13 +"),
    ("456 + 98 * -96 / 71 + 963", "456 98 -96 * 71 / + 963 +"),
    ("-126 - 26 * 21", "-126 26 21 * -"),
    ("15 + 6 * 233 / 11 - 12", "15 6 233 * 11 / + 12 -"),
    ("1786 * 4 + 98 - 11 / 4 * - 9", "1786 4 * 98 + 11 4 / -9 * -"),
    ("258 / 7 * 46 - 6 - 958 * 41", "258 7 / 46 * 6 - 958 41 * -"),
    ("9 + 14 ^ 45 * 4 - 11 * 7 ^ 1 ^ 2", "9 14 45 ^ 4 * + 11 7 1 2 ^ ^ * -"),

    # sin
    ("sin(1)", "1 sin"),
    ("3 * sin(5)", "3 5 sin *"),
    ("3 * sin(4)", "3 4 sin *"),
    ("sin(7) + 5 * 8 - 3", "7 sin 5 8 * + 3 -"),
    ("sin(987654321) - 123456789", "987654321 sin 123456789 -"),
    ("-449 + sin(2) * 7 / 2", "-449 2 sin 7 * 2 / +"),
    ("1 - sin(1)", "1 1 sin -"),

    # cos
    ("cos(0)", "0 cos"),
    ("cos(2) - -1", "2 cos -1 -"),
    ("cos(-7) - -1", "-7 cos -1 -"),
    ("-16 - cos(6)", "-16 6 cos -"),
    ("987654321 - cos(123456789)", "987654321 123456789 cos -"),

    # harder combinations
    ("458 + 848 / 2 _ 5 * 75 + 27 - 8", "458 848 2 5 _ / 75 * + 27 + 8 -"),
    ("48 _ 41 _ 54 + _ 47 _ 2", "48 41 54 _ _ 47 2 _ _ +"),
    ("4 ^ 25 ^ 42 + 8 / 8", "4 25 42 ^ ^ 8 8 / +"),
    ("8 + 9 ^ 5 ^ 8 ^ 8 ^ 8", "8 9 5 8 8 8 ^ ^ ^ ^ +"),

    # same without spacing
    ("1+1", "1 1 +"),
    ("23+-13", "23 -13 +"),
    ("-17+-111", "-17 -111 +"),
    ("-126+26", "-126 26 +"),
    ("987654321+123456789", "987654321 123456789 +"),
    ("-987654321+123456789", "-987654321 123456789 +"),

    ("1-1", "1 1 -"),
    ("2--1", "2 -1 -"),
    ("-7--1", "-7 -1 -"),
    ("-16-6", "-16 6 -"),
    ("987654321-123456789", "987654321 123456789 -"),
    ("-963852741-147258369", "-963852741 147258369 -"),

    ("7+5+8-2", "7 5 + 8 + 2 -"),
    ("-449+2*7/2", "-449 2 7 * 2 / +"),
    ("7/5*6", "7 5 / 6 *"),
    ("17-8*-22+7", "17 8 -22 * - 7 +"),
    ("7+5*8-3", "7 5 8 * + 3 -"),
    ("13+4*5+13", "13 4 5 * + 13 +"),
    ("-13+-4*5+-13", "-13 -4 5 * + -13 +"),
    ("456+98*-96/71+963", "456 98 -96 * 71 / + 963 +"),
    ("-126-26*21", "-126 26 21 * -"),
    ("15+6*233/11-12", "15 6 233 * 11 / + 12 -"),
    ("1786*4+98-11/4*-9", "1786 4 * 98 + 11 4 / -9 * -"),
    ("258/7*46-6-958*41", "258 7 / 46 * 6 - 958 41 * -"),
    ("9+14^45*4-11*7^1^2", "9 14 45 ^ 4 * + 11 7 1 2 ^ ^ * -"),

    ("3*sin(5)", "3 5 sin *"),
    ("3*sin(4)", "3 4 sin *"),
    ("sin(7)+5*8-3", "7 sin 5 8 * + 3 -"),
    ("sin(987654321)-123456789", "987654321 sin 123456789 -"),
    ("-449+sin(2)*7/2", "-449 2 sin 7 * 2 / +"),
    ("1-sin(1)", "1 1 sin -"),

    ("cos(2)--1", "2 cos -1 -"),
    ("cos(-7)--1", "-7 cos -1 -"),
    ("-16-cos(6)", "-16 6 cos -"),
    ("987654321-cos(123456789)", "987654321 123456789 cos -"),

    ("458+848/2_5*75+27-8", "458 848 2 5 _ / 75 * + 27 + 8 -"),
    ("48_41_54+_47_2", "48 41 54 _ _ 47 2 _ _ +"),
    ("4^25^42+8/8", "4 25 42 ^ ^ 8 8 / +"),
    ("sin(sin(1))", "1 sin sin"),
    ("8+9^5^8^8^8", "8 9 5 8 8 8 ^ ^ ^ ^ +"),
])
def test_stringToPostfix_conversion(problem, result):
    assert MathLib.transform_string_to_postfix(problem) == result


@pytest.mark.parametrize("problem", [
    ("Lorem Ipsum"),
    ("55sadf / 2"),
    ("54fa * 2"),
    ("87aef7 +"),
    ("-78sf885 - 2"),
    ("55sadf/2"),
    ("54fa*2"),
    ("87aef7+"),
    ("-78sf885-2"),
])
def test_wrong_input(problem):
    result_of_mathlib = MathLib.transform_string_to_postfix(problem)
    assert result_of_mathlib is None
